'use strict';
const utils = require('./utils');
const StateMachine = module.exports = exports = function StateMachine() {
};
StateMachine.ctor = function() {
  const states = utils.args(arguments);
  const ctor = function() {
    StateMachine.apply(this, arguments);
    this.paths = {};
    this.states = {};
    this.stateNames = states;
    let i = states.length,
        state;
    while (i--) {
      state = states[i];
      this.states[state] = {};
    }
  };
  ctor.prototype = new StateMachine();
  states.forEach(function(state) {
    ctor.prototype[state] = function(path) {
      this._changeState(path, state);
    };
  });
  return ctor;
};
StateMachine.prototype._changeState = function _changeState(path, nextState) {
  const prevBucket = this.states[this.paths[path]];
  if (prevBucket) delete prevBucket[path];
  this.paths[path] = nextState;
  this.states[nextState][path] = true;
};
StateMachine.prototype.clear = function clear(state) {
  const keys = Object.keys(this.states[state]);
  let i = keys.length;
  let path;
  while (i--) {
    path = keys[i];
    delete this.states[state][path];
    delete this.paths[path];
  }
};
StateMachine.prototype.some = function some() {
  const _this = this;
  const what = arguments.length ? arguments : this.stateNames;
  return Array.prototype.some.call(what, function(state) {
    return Object.keys(_this.states[state]).length;
  });
};
StateMachine.prototype._iter = function _iter(iterMethod) {
  return function() {
    const numArgs = arguments.length;
    let states = utils.args(arguments, 0, numArgs - 1);
    const callback = arguments[numArgs - 1];
    if (!states.length) states = this.stateNames;
    const _this = this;
    const paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);
    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  };
};
StateMachine.prototype.forEach = function forEach() {
  this.forEach = this._iter('forEach');
  return this.forEach.apply(this, arguments);
};
StateMachine.prototype.map = function map() {
  this.map = this._iter('map');
  return this.map.apply(this, arguments);
};

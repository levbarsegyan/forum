'use strict';
module.exports = function normalizeRefPath(refPath, doc, populatedPath) {
  if (refPath == null) {
    return refPath;
  }
  if (typeof refPath === 'function') {
    refPath = refPath.call(doc, doc, populatedPath);
  }
  const hasNumericProp = /(\.\d+$|\.\d+\.)/g;
  if (hasNumericProp.test(populatedPath)) {
    const chunks = populatedPath.split(hasNumericProp);
    if (chunks[chunks.length - 1] === '') {
      throw new Error('Can\'t populate individual element in an array');
    }
    let _refPath = '';
    let _remaining = refPath;
    for (let i = 0; i < chunks.length; i += 2) {
      const chunk = chunks[i];
      if (_remaining.startsWith(chunk + '.')) {
        _refPath += _remaining.substr(0, chunk.length) + chunks[i + 1];
        _remaining = _remaining.substr(chunk.length + 1);
      } else if (i === chunks.length - 1) {
        _refPath += _remaining;
        _remaining = '';
        break;
      } else {
        throw new Error('Could not normalize ref path, chunk ' + chunk + ' not in populated path');
      }
    }
    return _refPath;
  }
  return refPath;
};

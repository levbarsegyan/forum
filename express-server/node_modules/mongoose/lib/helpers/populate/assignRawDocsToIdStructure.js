'use strict';
module.exports = assignRawDocsToIdStructure;
function assignRawDocsToIdStructure(rawIds, resultDocs, resultOrder, options, recursed) {
  const newOrder = [];
  const sorting = options.sort && rawIds.length > 1;
  const nullIfNotFound = options.$nullIfNotFound;
  let doc;
  let sid;
  let id;
  for (let i = 0; i < rawIds.length; ++i) {
    id = rawIds[i];
    if (Array.isArray(id)) {
      assignRawDocsToIdStructure(id, resultDocs, resultOrder, options, true);
      newOrder.push(id);
      continue;
    }
    if (id === null && !sorting) {
      newOrder.push(id);
      continue;
    }
    sid = String(id);
    doc = resultDocs[sid];
    if (options.clone) {
      doc = doc.constructor.hydrate(doc._doc);
    }
    if (recursed) {
      if (doc) {
        if (sorting) {
          newOrder[resultOrder[sid]] = doc;
        } else {
          newOrder.push(doc);
        }
      } else {
        newOrder.push(nullIfNotFound ? null : id);
      }
    } else {
      newOrder[i] = doc || null;
    }
  }
  rawIds.length = 0;
  if (newOrder.length) {
    newOrder.forEach(function(doc, i) {
      rawIds[i] = doc;
    });
  }
}

'use strict';
const CastError = require('../error/cast');
const SchemaType = require('../schematype');
const castBoolean = require('../cast/boolean');
const utils = require('../utils');
function SchemaBoolean(path, options) {
  SchemaType.call(this, path, options, 'Boolean');
}
SchemaBoolean.schemaName = 'Boolean';
SchemaBoolean.prototype = Object.create(SchemaType.prototype);
SchemaBoolean.prototype.constructor = SchemaBoolean;
SchemaBoolean._cast = castBoolean;
SchemaBoolean.cast = function cast(caster) {
  if (arguments.length === 0) {
    return this._cast;
  }
  if (caster === false) {
    caster = v => {
      if (v != null && typeof v !== 'boolean') {
        throw new Error();
      }
      return v;
    };
  }
  this._cast = caster;
  return this._cast;
};
SchemaBoolean._checkRequired = v => v === true || v === false;
SchemaBoolean.checkRequired = SchemaType.checkRequired;
SchemaBoolean.prototype.checkRequired = function(value) {
  return this.constructor._checkRequired(value);
};
Object.defineProperty(SchemaBoolean, 'convertToTrue', {
  get: () => castBoolean.convertToTrue,
  set: v => { castBoolean.convertToTrue = v; }
});
Object.defineProperty(SchemaBoolean, 'convertToFalse', {
  get: () => castBoolean.convertToFalse,
  set: v => { castBoolean.convertToFalse = v; }
});
SchemaBoolean.prototype.cast = function(value) {
  const castBoolean = typeof this.constructor.cast === 'function' ?
    this.constructor.cast() :
    SchemaBoolean.cast();
  try {
    return castBoolean(value);
  } catch (error) {
    throw new CastError('Boolean', value, this.path);
  }
};
SchemaBoolean.$conditionalHandlers =
    utils.options(SchemaType.prototype.$conditionalHandlers, {});
SchemaBoolean.prototype.castForQuery = function($conditional, val) {
  let handler;
  if (arguments.length === 2) {
    handler = SchemaBoolean.$conditionalHandlers[$conditional];
    if (handler) {
      return handler.call(this, val);
    }
    return this._castForQuery(val);
  }
  return this._castForQuery($conditional);
};
module.exports = SchemaBoolean;

'use strict';
const SchemaType = require('../schematype');
const symbols = require('./symbols');
const utils = require('../utils');
function Mixed(path, options) {
  if (options && options.default) {
    const def = options.default;
    if (Array.isArray(def) && def.length === 0) {
      options.default = Array;
    } else if (!options.shared && utils.isObject(def) && Object.keys(def).length === 0) {
      options.default = function() {
        return {};
      };
    }
  }
  SchemaType.call(this, path, options, 'Mixed');
  this[symbols.schemaMixedSymbol] = true;
}
Mixed.schemaName = 'Mixed';
Mixed.prototype = Object.create(SchemaType.prototype);
Mixed.prototype.constructor = Mixed;
Mixed.get = SchemaType.get;
Mixed.prototype.cast = function(val) {
  return val;
};
Mixed.prototype.castForQuery = function($cond, val) {
  if (arguments.length === 2) {
    return val;
  }
  return $cond;
};
module.exports = Mixed;

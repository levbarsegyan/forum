'use strict';
const castObjectId = require('../cast/objectid');
const SchemaType = require('../schematype');
const oid = require('../types/objectid');
const utils = require('../utils');
const populateModelSymbol = require('../helpers/symbols').populateModelSymbol;
const CastError = SchemaType.CastError;
let Document;
function ObjectId(key, options) {
  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);
  const suppressWarning = options && options.suppressWarning;
  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {
    console.warn('mongoose: To create a new ObjectId please try ' +
      '`Mongoose.Types.ObjectId` instead of using ' +
      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +
      'you\'re trying to create a hex char path in your schema.');
    console.trace();
  }
  SchemaType.call(this, key, options, 'ObjectID');
}
ObjectId.schemaName = 'ObjectId';
ObjectId.prototype = Object.create(SchemaType.prototype);
ObjectId.prototype.constructor = ObjectId;
ObjectId.get = SchemaType.get;
ObjectId.prototype.auto = function(turnOn) {
  if (turnOn) {
    this.default(defaultId);
    this.set(resetId);
  }
  return this;
};
ObjectId._checkRequired = v => v instanceof oid;
ObjectId._cast = castObjectId;
ObjectId.cast = function cast(caster) {
  if (arguments.length === 0) {
    return this._cast;
  }
  if (caster === false) {
    caster = v => {
      if (!(v instanceof oid)) {
        throw new Error();
      }
      return v;
    };
  }
  this._cast = caster;
  return this._cast;
};
ObjectId.checkRequired = SchemaType.checkRequired;
ObjectId.prototype.checkRequired = function checkRequired(value, doc) {
  if (SchemaType._isRef(this, value, doc, true)) {
    return !!value;
  }
  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?
    this.constructor.checkRequired() :
    ObjectId.checkRequired();
  return _checkRequired(value);
};
ObjectId.prototype.cast = function(value, doc, init) {
  if (SchemaType._isRef(this, value, doc, init)) {
    if (value === null || value === undefined) {
      return value;
    }
    Document || (Document = require('./../document'));
    if (value instanceof Document) {
      value.$__.wasPopulated = true;
      return value;
    }
    if (value instanceof oid) {
      return value;
    } else if ((value.constructor.name || '').toLowerCase() === 'objectid') {
      return new oid(value.toHexString());
    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {
      throw new CastError('ObjectId', value, this.path);
    }
    const path = doc.$__fullPath(this.path);
    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;
    const pop = owner.populated(path, true);
    let ret = value;
    if (!doc.$__.populated ||
        !doc.$__.populated[path] ||
        !doc.$__.populated[path].options ||
        !doc.$__.populated[path].options.options ||
        !doc.$__.populated[path].options.options.lean) {
      ret = new pop.options[populateModelSymbol](value);
      ret.$__.wasPopulated = true;
    }
    return ret;
  }
  const castObjectId = typeof this.constructor.cast === 'function' ?
    this.constructor.cast() :
    ObjectId.cast();
  try {
    return castObjectId(value);
  } catch (error) {
    throw new CastError('ObjectId', value, this.path);
  }
};
function handleSingle(val) {
  return this.cast(val);
}
ObjectId.prototype.$conditionalHandlers =
    utils.options(SchemaType.prototype.$conditionalHandlers, {
      $gt: handleSingle,
      $gte: handleSingle,
      $lt: handleSingle,
      $lte: handleSingle
    });
function defaultId() {
  return new oid();
}
defaultId.$runBeforeSetters = true;
function resetId(v) {
  Document || (Document = require('./../document'));
  if (this instanceof Document) {
    if (v === void 0) {
      const _v = new oid;
      this.$__._id = _v;
      return _v;
    }
    this.$__._id = v;
  }
  return v;
}
module.exports = ObjectId;

'use strict';
var Collection = require('./collection');
var utils = require('../utils');
function NodeCollection(col) {
  this.collection = col;
  this.collectionName = col.collectionName;
}
utils.inherits(NodeCollection, Collection);
NodeCollection.prototype.find = function(match, options, cb) {
  this.collection.find(match, options, function(err, cursor) {
    if (err) return cb(err);
    try {
      cursor.toArray(cb);
    } catch (error) {
      cb(error);
    }
  });
};
NodeCollection.prototype.findOne = function(match, options, cb) {
  this.collection.findOne(match, options, cb);
};
NodeCollection.prototype.count = function(match, options, cb) {
  this.collection.count(match, options, cb);
};
NodeCollection.prototype.distinct = function(prop, match, options, cb) {
  this.collection.distinct(prop, match, options, cb);
};
NodeCollection.prototype.update = function(match, update, options, cb) {
  this.collection.update(match, update, options, cb);
};
NodeCollection.prototype.updateMany = function(match, update, options, cb) {
  this.collection.updateMany(match, update, options, cb);
};
NodeCollection.prototype.updateOne = function(match, update, options, cb) {
  this.collection.updateOne(match, update, options, cb);
};
NodeCollection.prototype.replaceOne = function(match, update, options, cb) {
  this.collection.replaceOne(match, update, options, cb);
};
NodeCollection.prototype.deleteOne = function(match, options, cb) {
  this.collection.deleteOne(match, options, cb);
};
NodeCollection.prototype.deleteMany = function(match, options, cb) {
  this.collection.deleteMany(match, options, cb);
};
NodeCollection.prototype.remove = function(match, options, cb) {
  this.collection.remove(match, options, cb);
};
NodeCollection.prototype.findAndModify = function(match, update, options, cb) {
  var sort = Array.isArray(options.sort) ? options.sort : [];
  this.collection.findAndModify(match, sort, update, options, cb);
};
NodeCollection.prototype.findStream = function(match, findOptions, streamOptions) {
  return this.collection.find(match, findOptions).stream(streamOptions);
};
NodeCollection.prototype.findCursor = function(match, findOptions) {
  return this.collection.find(match, findOptions);
};
module.exports = exports = NodeCollection;

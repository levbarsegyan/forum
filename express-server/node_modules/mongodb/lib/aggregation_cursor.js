'use strict';
const inherits = require('util').inherits;
const MongoError = require('mongodb-core').MongoError;
const Readable = require('stream').Readable;
const CoreCursor = require('./cursor');
const deprecate = require('util').deprecate;
const SUPPORTS = require('./utils').SUPPORTS;
var AggregationCursor = function(bson, ns, cmd, options, topology, topologyOptions) {
  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));
  var state = AggregationCursor.INIT;
  var streamOptions = {};
  var maxTimeMS = null;
  var promiseLibrary = options.promiseLibrary || Promise;
  Readable.call(this, { objectMode: true });
  this.s = {
    maxTimeMS: maxTimeMS,
    state: state,
    streamOptions: streamOptions,
    bson: bson,
    ns: ns,
    cmd: cmd,
    options: options,
    topology: topology,
    topologyOptions: topologyOptions,
    promiseLibrary: promiseLibrary,
    session: options.session
  };
};
inherits(AggregationCursor, Readable);
for (var name in CoreCursor.prototype) {
  AggregationCursor.prototype[name] = CoreCursor.prototype[name];
}
if (SUPPORTS.ASYNC_ITERATOR) {
  AggregationCursor.prototype[
    Symbol.asyncIterator
  ] = require('./async/async_iterator').asyncIterator;
}
AggregationCursor.prototype.batchSize = function(value) {
  if (this.s.state === AggregationCursor.CLOSED || this.isDead())
    throw MongoError.create({ message: 'Cursor is closed', driver: true });
  if (typeof value !== 'number')
    throw MongoError.create({ message: 'batchSize requires an integer', driver: true });
  if (this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;
  this.setCursorBatchSize(value);
  return this;
};
AggregationCursor.prototype.geoNear = deprecate(function(document) {
  this.s.cmd.pipeline.push({ $geoNear: document });
  return this;
}, 'The `$geoNear` stage is deprecated in MongoDB 4.0, and removed in version 4.2.');
AggregationCursor.prototype.group = function(document) {
  this.s.cmd.pipeline.push({ $group: document });
  return this;
};
AggregationCursor.prototype.limit = function(value) {
  this.s.cmd.pipeline.push({ $limit: value });
  return this;
};
AggregationCursor.prototype.match = function(document) {
  this.s.cmd.pipeline.push({ $match: document });
  return this;
};
AggregationCursor.prototype.maxTimeMS = function(value) {
  if (this.s.topology.lastIsMaster().minWireVersion > 2) {
    this.s.cmd.maxTimeMS = value;
  }
  return this;
};
AggregationCursor.prototype.out = function(destination) {
  this.s.cmd.pipeline.push({ $out: destination });
  return this;
};
AggregationCursor.prototype.project = function(document) {
  this.s.cmd.pipeline.push({ $project: document });
  return this;
};
AggregationCursor.prototype.lookup = function(document) {
  this.s.cmd.pipeline.push({ $lookup: document });
  return this;
};
AggregationCursor.prototype.redact = function(document) {
  this.s.cmd.pipeline.push({ $redact: document });
  return this;
};
AggregationCursor.prototype.skip = function(value) {
  this.s.cmd.pipeline.push({ $skip: value });
  return this;
};
AggregationCursor.prototype.sort = function(document) {
  this.s.cmd.pipeline.push({ $sort: document });
  return this;
};
AggregationCursor.prototype.unwind = function(field) {
  this.s.cmd.pipeline.push({ $unwind: field });
  return this;
};
AggregationCursor.prototype.getLogger = function() {
  return this.logger;
};
AggregationCursor.prototype.get = AggregationCursor.prototype.toArray;
AggregationCursor.INIT = 0;
AggregationCursor.OPEN = 1;
AggregationCursor.CLOSED = 2;
module.exports = AggregationCursor;

'use strict';
const CServer = require('mongodb-core').Server;
const Cursor = require('../cursor');
const TopologyBase = require('./topology_base').TopologyBase;
const Store = require('./topology_base').Store;
const MongoError = require('mongodb-core').MongoError;
const MAX_JS_INT = require('../utils').MAX_JS_INT;
const translateOptions = require('../utils').translateOptions;
const filterOptions = require('../utils').filterOptions;
const mergeOptions = require('../utils').mergeOptions;
var legalOptionNames = [
  'ha',
  'haInterval',
  'acceptableLatencyMS',
  'poolSize',
  'ssl',
  'checkServerIdentity',
  'sslValidate',
  'sslCA',
  'sslCRL',
  'sslCert',
  'ciphers',
  'ecdhCurve',
  'sslKey',
  'sslPass',
  'socketOptions',
  'bufferMaxEntries',
  'store',
  'auto_reconnect',
  'autoReconnect',
  'emitError',
  'keepAlive',
  'keepAliveInitialDelay',
  'noDelay',
  'connectTimeoutMS',
  'socketTimeoutMS',
  'family',
  'loggerLevel',
  'logger',
  'reconnectTries',
  'reconnectInterval',
  'monitoring',
  'appname',
  'domainsEnabled',
  'servername',
  'promoteLongs',
  'promoteValues',
  'promoteBuffers',
  'compression',
  'promiseLibrary',
  'monitorCommands'
];
class Server extends TopologyBase {
  constructor(host, port, options) {
    super();
    var self = this;
    options = filterOptions(options, legalOptionNames);
    const promiseLibrary = options.promiseLibrary;
    var storeOptions = {
      force: false,
      bufferMaxEntries:
        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT
    };
    var store = options.store || new Store(self, storeOptions);
    if (host.indexOf('/') !== -1) {
      if (port != null && typeof port === 'object') {
        options = port;
        port = null;
      }
    } else if (port == null) {
      throw MongoError.create({ message: 'port must be specified', driver: true });
    }
    var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;
    reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;
    var clonedOptions = mergeOptions(
      {},
      {
        host: host,
        port: port,
        disconnectHandler: store,
        cursorFactory: Cursor,
        reconnect: reconnect,
        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,
        size: typeof options.poolSize === 'number' ? options.poolSize : 5,
        monitorCommands:
          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false
      }
    );
    clonedOptions = translateOptions(clonedOptions, options);
    var socketOptions =
      options.socketOptions && Object.keys(options.socketOptions).length > 0
        ? options.socketOptions
        : options;
    clonedOptions = translateOptions(clonedOptions, socketOptions);
    clonedOptions.clientInfo = this.clientInfo;
    if (options.appname) {
      clonedOptions.clientInfo.application = { name: options.appname };
    }
    this.s = {
      coreTopology: new CServer(clonedOptions),
      sCapabilities: null,
      clonedOptions: clonedOptions,
      reconnect: clonedOptions.reconnect,
      emitError: clonedOptions.emitError,
      poolSize: clonedOptions.size,
      storeOptions: storeOptions,
      store: store,
      host: host,
      port: port,
      options: options,
      sessionPool: null,
      sessions: [],
      promiseLibrary: promiseLibrary || Promise
    };
  }
  connect(_options, callback) {
    var self = this;
    if ('function' === typeof _options) (callback = _options), (_options = {});
    if (_options == null) _options = this.s.clonedOptions;
    if (!('function' === typeof callback)) callback = null;
    _options = Object.assign({}, this.s.clonedOptions, _options);
    self.s.options = _options;
    self.s.storeOptions.bufferMaxEntries =
      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;
    var connectErrorHandler = function() {
      return function(err) {
        var events = ['timeout', 'error', 'close'];
        events.forEach(function(e) {
          self.s.coreTopology.removeListener(e, connectHandlers[e]);
        });
        self.s.coreTopology.removeListener('connect', connectErrorHandler);
        try {
          callback(err);
        } catch (err) {
          process.nextTick(function() {
            throw err;
          });
        }
      };
    };
    var errorHandler = function(event) {
      return function(err) {
        if (event !== 'error') {
          self.emit(event, err);
        }
      };
    };
    var reconnectHandler = function() {
      self.emit('reconnect', self);
      self.s.store.execute();
    };
    var reconnectFailedHandler = function(err) {
      self.emit('reconnectFailed', err);
      self.s.store.flush(err);
    };
    var destroyHandler = function() {
      self.s.store.flush();
    };
    var relay = function(event) {
      return function(t, server) {
        self.emit(event, t, server);
      };
    };
    var connectHandler = function() {
      ['timeout', 'error', 'close', 'destroy'].forEach(function(e) {
        self.s.coreTopology.removeAllListeners(e);
      });
      self.s.coreTopology.on('timeout', errorHandler('timeout'));
      self.s.coreTopology.once('error', errorHandler('error'));
      self.s.coreTopology.on('close', errorHandler('close'));
      self.s.coreTopology.on('destroy', destroyHandler);
      self.emit('open', null, self);
      try {
        callback(null, self);
      } catch (err) {
        process.nextTick(function() {
          throw err;
        });
      }
    };
    var connectHandlers = {
      timeout: connectErrorHandler('timeout'),
      error: connectErrorHandler('error'),
      close: connectErrorHandler('close')
    };
    [
      'timeout',
      'error',
      'close',
      'serverOpening',
      'serverDescriptionChanged',
      'serverHeartbeatStarted',
      'serverHeartbeatSucceeded',
      'serverHeartbeatFailed',
      'serverClosed',
      'topologyOpening',
      'topologyClosed',
      'topologyDescriptionChanged',
      'commandStarted',
      'commandSucceeded',
      'commandFailed'
    ].forEach(function(e) {
      self.s.coreTopology.removeAllListeners(e);
    });
    self.s.coreTopology.once('timeout', connectHandlers.timeout);
    self.s.coreTopology.once('error', connectHandlers.error);
    self.s.coreTopology.once('close', connectHandlers.close);
    self.s.coreTopology.once('connect', connectHandler);
    self.s.coreTopology.on('reconnect', reconnectHandler);
    self.s.coreTopology.on('reconnectFailed', reconnectFailedHandler);
    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));
    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));
    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));
    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));
    self.s.coreTopology.on('serverOpening', relay('serverOpening'));
    self.s.coreTopology.on('serverClosed', relay('serverClosed'));
    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));
    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));
    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));
    self.s.coreTopology.on('commandStarted', relay('commandStarted'));
    self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));
    self.s.coreTopology.on('commandFailed', relay('commandFailed'));
    self.s.coreTopology.on('attemptReconnect', relay('attemptReconnect'));
    self.s.coreTopology.on('monitoring', relay('monitoring'));
    self.s.coreTopology.connect(_options);
  }
}
Object.defineProperty(Server.prototype, 'poolSize', {
  enumerable: true,
  get: function() {
    return this.s.coreTopology.connections().length;
  }
});
Object.defineProperty(Server.prototype, 'autoReconnect', {
  enumerable: true,
  get: function() {
    return this.s.reconnect;
  }
});
Object.defineProperty(Server.prototype, 'host', {
  enumerable: true,
  get: function() {
    return this.s.host;
  }
});
Object.defineProperty(Server.prototype, 'port', {
  enumerable: true,
  get: function() {
    return this.s.port;
  }
});
module.exports = Server;

'use strict';
const executeOperation = require('./utils').executeOperation;
const applyWriteConcern = require('./utils').applyWriteConcern;
const addUser = require('./operations/db_ops').addUser;
const executeDbAdminCommand = require('./operations/db_ops').executeDbAdminCommand;
const removeUser = require('./operations/db_ops').removeUser;
const replSetGetStatus = require('./operations/admin_ops').replSetGetStatus;
const serverStatus = require('./operations/admin_ops').serverStatus;
const validateCollection = require('./operations/admin_ops').validateCollection;
function Admin(db, topology, promiseLibrary) {
  if (!(this instanceof Admin)) return new Admin(db, topology);
  this.s = {
    db: db,
    topology: topology,
    promiseLibrary: promiseLibrary
  };
}
Admin.prototype.command = function(command, options, callback) {
  const args = Array.prototype.slice.call(arguments, 1);
  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
  options = args.length ? args.shift() : {};
  return executeOperation(this.s.db.s.topology, executeDbAdminCommand.bind(this.s.db), [
    this.s.db,
    command,
    options,
    callback
  ]);
};
Admin.prototype.buildInfo = function(options, callback) {
  if (typeof options === 'function') (callback = options), (options = {});
  options = options || {};
  const cmd = { buildinfo: 1 };
  return executeOperation(this.s.db.s.topology, executeDbAdminCommand.bind(this.s.db), [
    this.s.db,
    cmd,
    options,
    callback
  ]);
};
Admin.prototype.serverInfo = function(options, callback) {
  if (typeof options === 'function') (callback = options), (options = {});
  options = options || {};
  const cmd = { buildinfo: 1 };
  return executeOperation(this.s.db.s.topology, executeDbAdminCommand.bind(this.s.db), [
    this.s.db,
    cmd,
    options,
    callback
  ]);
};
Admin.prototype.serverStatus = function(options, callback) {
  if (typeof options === 'function') (callback = options), (options = {});
  options = options || {};
  return executeOperation(this.s.db.s.topology, serverStatus, [this, options, callback]);
};
Admin.prototype.ping = function(options, callback) {
  if (typeof options === 'function') (callback = options), (options = {});
  options = options || {};
  const cmd = { ping: 1 };
  return executeOperation(this.s.db.s.topology, executeDbAdminCommand.bind(this.s.db), [
    this.s.db,
    cmd,
    options,
    callback
  ]);
};
Admin.prototype.addUser = function(username, password, options, callback) {
  const args = Array.prototype.slice.call(arguments, 2);
  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
  options = args.length ? args.shift() : {};
  options = Object.assign({}, options);
  options = applyWriteConcern(options, { db: this.s.db });
  options.dbName = 'admin';
  return executeOperation(this.s.db.s.topology, addUser, [
    this.s.db,
    username,
    password,
    options,
    callback
  ]);
};
Admin.prototype.removeUser = function(username, options, callback) {
  const args = Array.prototype.slice.call(arguments, 1);
  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
  options = args.length ? args.shift() : {};
  options = Object.assign({}, options);
  options = applyWriteConcern(options, { db: this.s.db });
  options.dbName = 'admin';
  return executeOperation(this.s.db.s.topology, removeUser, [
    this.s.db,
    username,
    options,
    callback
  ]);
};
Admin.prototype.validateCollection = function(collectionName, options, callback) {
  if (typeof options === 'function') (callback = options), (options = {});
  options = options || {};
  return executeOperation(this.s.db.s.topology, validateCollection, [
    this,
    collectionName,
    options,
    callback
  ]);
};
Admin.prototype.listDatabases = function(options, callback) {
  if (typeof options === 'function') (callback = options), (options = {});
  options = options || {};
  const cmd = { listDatabases: 1 };
  if (options.nameOnly) cmd.nameOnly = Number(cmd.nameOnly);
  return executeOperation(this.s.db.s.topology, executeDbAdminCommand.bind(this.s.db), [
    this.s.db,
    cmd,
    options,
    callback
  ]);
};
Admin.prototype.replSetGetStatus = function(options, callback) {
  if (typeof options === 'function') (callback = options), (options = {});
  options = options || {};
  return executeOperation(this.s.db.s.topology, replSetGetStatus, [this, options, callback]);
};
module.exports = Admin;

'use strict';
const inherits = require('util').inherits;
const ReadPreference = require('mongodb-core').ReadPreference;
const MongoError = require('mongodb-core').MongoError;
const Readable = require('stream').Readable;
const CoreCursor = require('./cursor');
const SUPPORTS = require('./utils').SUPPORTS;
var CommandCursor = function(bson, ns, cmd, options, topology, topologyOptions) {
  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));
  var state = CommandCursor.INIT;
  var streamOptions = {};
  var maxTimeMS = null;
  var promiseLibrary = options.promiseLibrary || Promise;
  Readable.call(this, { objectMode: true });
  this.s = {
    maxTimeMS: maxTimeMS,
    state: state,
    streamOptions: streamOptions,
    bson: bson,
    ns: ns,
    cmd: cmd,
    options: options,
    topology: topology,
    topologyOptions: topologyOptions,
    promiseLibrary: promiseLibrary,
    session: options.session
  };
};
inherits(CommandCursor, Readable);
var methodsToInherit = [
  '_next',
  'next',
  'hasNext',
  'each',
  'forEach',
  'toArray',
  'rewind',
  'bufferedCount',
  'readBufferedDocuments',
  'close',
  'isClosed',
  'kill',
  'setCursorBatchSize',
  '_find',
  '_getmore',
  '_killcursor',
  'isDead',
  'explain',
  'isNotified',
  'isKilled',
  '_endSession',
  '_initImplicitSession'
];
for (var i = 0; i < methodsToInherit.length; i++) {
  CommandCursor.prototype[methodsToInherit[i]] = CoreCursor.prototype[methodsToInherit[i]];
}
if (SUPPORTS.ASYNC_ITERATOR) {
  CommandCursor.prototype[Symbol.asyncIterator] = require('./async/async_iterator').asyncIterator;
}
CommandCursor.prototype.setReadPreference = function(readPreference) {
  if (this.s.state === CommandCursor.CLOSED || this.isDead()) {
    throw MongoError.create({ message: 'Cursor is closed', driver: true });
  }
  if (this.s.state !== CommandCursor.INIT) {
    throw MongoError.create({
      message: 'cannot change cursor readPreference after cursor has been accessed',
      driver: true
    });
  }
  if (readPreference instanceof ReadPreference) {
    this.s.options.readPreference = readPreference;
  } else if (typeof readPreference === 'string') {
    this.s.options.readPreference = new ReadPreference(readPreference);
  } else {
    throw new TypeError('Invalid read preference: ' + readPreference);
  }
  return this;
};
CommandCursor.prototype.batchSize = function(value) {
  if (this.s.state === CommandCursor.CLOSED || this.isDead())
    throw MongoError.create({ message: 'Cursor is closed', driver: true });
  if (typeof value !== 'number')
    throw MongoError.create({ message: 'batchSize requires an integer', driver: true });
  if (this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;
  this.setCursorBatchSize(value);
  return this;
};
CommandCursor.prototype.maxTimeMS = function(value) {
  if (this.s.topology.lastIsMaster().minWireVersion > 2) {
    this.s.cmd.maxTimeMS = value;
  }
  return this;
};
CommandCursor.prototype.getLogger = function() {
  return this.logger;
};
CommandCursor.prototype.get = CommandCursor.prototype.toArray;
CommandCursor.INIT = 0;
CommandCursor.OPEN = 1;
CommandCursor.CLOSED = 2;
module.exports = CommandCursor;

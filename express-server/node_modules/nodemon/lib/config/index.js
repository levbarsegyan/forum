var debug = require('debug')('nodemon');
var load = require('./load');
var rules = require('../rules');
var utils = require('../utils');
var pinVersion = require('../version').pin;
var command = require('./command');
var rulesToMonitor = require('../monitor/match').rulesToMonitor;
var bus = utils.bus;
function reset() {
  rules.reset();
  config.dirs = [];
  config.options = { ignore: [], watch: [] };
  config.lastStarted = 0;
  config.loaded = [];
}
var config = {
  run: false,
  system: {
    cwd: process.cwd(),
  },
  required: false,
  dirs: [],
  timeout: 1000,
  options: {},
};
config.load = function (settings, ready) {
  reset();
  var config = this;
  load(settings, config.options, config, function (options) {
    config.options = options;
    if (options.watch.length === 0) {
      options.watch.push('*.*');
    }
    if (options['watch_interval']) { 
      options.watchInterval = options['watch_interval']; 
    }
    config.watchInterval = options.watchInterval || null;
    if (options.signal) {
      config.signal = options.signal;
    }
    var cmd = command(config.options);
    config.command = {
      raw: cmd,
      string: utils.stringify(cmd.executable, cmd.args),
    };
    options.monitor = rulesToMonitor(options.watch, options.ignore, config);
    var cwd = process.cwd();
    debug('config: dirs', config.dirs);
    if (config.dirs.length === 0) {
      config.dirs.unshift(cwd);
    }
    bus.emit('config:update', config);
    pinVersion().then(function () {
      ready(config);
    }).catch(e => {
      console.error(e.stack);
      setTimeout(() => { throw e; }, 0);
    });
  });
};
config.reset = reset;
module.exports = config;

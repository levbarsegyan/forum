var fs = require('fs')
var path = require('path')
var mocha = require('mocha')
var assert = require('assert')
var requireUncached = require('require-uncached')
var npmRcPath = path.join(__dirname, '..', '.npmrc')
var afterEach = mocha.afterEach
var describe = mocha.describe
var it = mocha.it
var base64 = require('../base64')
var decodeBase64 = base64.decodeBase64
var encodeBase64 = base64.encodeBase64
describe('auth-token', function () {
  afterEach(function (done) {
    fs.unlink(npmRcPath, function () {
      done()
    })
  })
  it('should read global if no local is found', function () {
    var getAuthToken = requireUncached('../index')
    getAuthToken()
  })
  it('should return undefined if no auth token is given for registry', function (done) {
    fs.writeFile(npmRcPath, 'registry=http:
      var getAuthToken = requireUncached('../index')
      assert(!err, err)
      assert(!getAuthToken())
      done()
    })
  })
  describe('legacy auth token', function () {
    it('should return auth token if it is defined in the legacy way via the `_auth` key', function (done) {
      var content = [
        '_auth=foobar',
        'registry=http:
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'foobar', type: 'Basic'})
        done()
      })
    })
    it('should return legacy auth token defined by reference to an environment variable (with curly braces)', function (done) {
      var environmentVariable = '__REGISTRY_AUTH_TOKEN_NPM_TOKEN__'
      var content = [
        '_auth=${' + environmentVariable + '}',
        'registry=http:
      ].join('\n')
      process.env[environmentVariable] = 'foobar'
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'foobar', type: 'Basic'})
        delete process.env[environmentVariable]
        done()
      })
    })
    it('should return legacy auth token defined by reference to an environment variable (without curly braces)', function (done) {
      var environmentVariable = '__REGISTRY_AUTH_TOKEN_NPM_TOKEN__'
      var content = [
        '_auth=$' + environmentVariable,
        'registry=http:
      ].join('\n')
      process.env[environmentVariable] = 'foobar'
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'foobar', type: 'Basic'})
        delete process.env[environmentVariable]
        done()
      })
    })
  })
  describe('bearer token', function () {
    it('should return auth token if registry is defined', function (done) {
      var content = [
        'registry=http:
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'foobar', type: 'Bearer'})
        done()
      })
    })
    it('should use npmrc passed in', function (done) {
      var content = [
        'registry=http:
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        const npmrc = {
          'registry': 'http:
          '
        }
        assert.deepEqual(getAuthToken({npmrc: npmrc}), {token: 'qar', type: 'Bearer'})
        done()
      })
    })
    it('should return auth token if registry url has port specified', function (done) {
      var content = [
        'registry=http:
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'beepboop', type: 'Bearer'})
        done()
      })
    })
    it('should return auth token defined by reference to an environment variable (with curly braces)', function (done) {
      var environmentVariable = '__REGISTRY_AUTH_TOKEN_NPM_TOKEN__'
      var content = [
        'registry=http:
        '
      ].join('\n')
      process.env[environmentVariable] = 'foobar'
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'foobar', type: 'Bearer'})
        delete process.env[environmentVariable]
        done()
      })
    })
    it('should return auth token defined by reference to an environment variable (without curly braces)', function (done) {
      var environmentVariable = '__REGISTRY_AUTH_TOKEN_NPM_TOKEN__'
      var content = [
        'registry=http:
        '
      ].join('\n')
      process.env[environmentVariable] = 'foobar'
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'foobar', type: 'Bearer'})
        delete process.env[environmentVariable]
        done()
      })
    })
    it('should try with and without a slash at the end of registry url', function (done) {
      var content = [
        'registry=http:
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken(), {token: 'barbaz', type: 'Bearer'})
        done()
      })
    })
    it('should fetch for the registry given (if defined)', function (done) {
      var content = [
        '
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken('
        done()
      })
    })
    it('recursively finds registries for deep url if option is set', function (done, undef) {
      var opts = {recursive: true}
      var content = [
        '
        '
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken('https:
        assert.deepEqual(getAuthToken('https:
        assert.deepEqual(getAuthToken('https:
        assert.deepEqual(getAuthToken('http:
        assert.deepEqual(getAuthToken('http:
        assert.equal(getAuthToken('
        done()
      })
    })
    it('should try both with and without trailing slash', function (done) {
      fs.writeFile(npmRcPath, '
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken('https:
        done()
      })
    })
    it('should prefer bearer token over basic token', function (done) {
      var content = [
        'registry=http:
        'registry=http:
        '
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(getAuthToken('
        done()
      })
    })
    it('"nerf darts" registry urls', function (done, undef) {
      fs.writeFile(npmRcPath, '
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.deepEqual(
          getAuthToken('https:
          {token: 'heider', type: 'Bearer'}
        )
        done()
      })
    })
  })
  describe('basic token', function () {
    it('should return undefined if password or username are missing', function (done, undef) {
      var content = [
        'registry=http:
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        assert.equal(getAuthToken('
        assert.equal(getAuthToken('
        done()
      })
    })
    it('should return basic token if username and password are defined', function (done) {
      var content = [
        'registry=http:
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        var token = getAuthToken()
        assert.deepEqual(token, {
          token: 'Zm9vYmFyOmZvb2Jhcg==',
          type: 'Basic',
          username: 'foobar',
          password: 'foobar'
        })
        assert.equal(decodeBase64(token.token), 'foobar:foobar')
        done()
      })
    })
    it('should return basic token if registry url has port specified', function (done) {
      var content = [
        'registry=http:
        '
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        var token = getAuthToken()
        assert.deepEqual(token, {
          token: 'Zm9vYmFyOmZvb2Jhcg==',
          type: 'Basic',
          username: 'foobar',
          password: 'foobar'
        })
        assert.equal(decodeBase64(token.token), 'foobar:foobar')
        done()
      })
    })
    it('should return password defined by reference to an environment variable (with curly braces)', function (done) {
      var environmentVariable = '__REGISTRY_PASSWORD__'
      var content = [
        'registry=http:
        '
        '
      ].join('\n')
      process.env[environmentVariable] = encodeBase64('password')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        var token = getAuthToken()
        assert.deepEqual(token, {
          type: 'Basic',
          username: 'username',
          password: 'password',
          token: 'dXNlcm5hbWU6cGFzc3dvcmQ='
        })
        assert.equal(decodeBase64(token.token), 'username:password')
        delete process.env[environmentVariable]
        done()
      })
    })
    it('should return password defined by reference to an environment variable (without curly braces)', function (done) {
      var environmentVariable = '__REGISTRY_PASSWORD__'
      var content = [
        'registry=http:
        '
        '
      ].join('\n')
      process.env[environmentVariable] = encodeBase64('password')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        var token = getAuthToken()
        assert.deepEqual(token, {
          type: 'Basic',
          username: 'username',
          password: 'password',
          token: 'dXNlcm5hbWU6cGFzc3dvcmQ='
        })
        assert.equal(decodeBase64(token.token), 'username:password')
        delete process.env[environmentVariable]
        done()
      })
    })
    it('should try with and without a slash at the end of registry url', function (done) {
      var content = [
        'registry=http:
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        var token = getAuthToken()
        assert.deepEqual(token, {
          token: 'YmFyYmF6OmJhcmJheQ==',
          type: 'Basic',
          password: 'barbay',
          username: 'barbaz'
        })
        assert.equal(decodeBase64(token.token), 'barbaz:barbay')
        done()
      })
    })
    it('should fetch for the registry given (if defined)', function (done) {
      var content = [
        '
        '
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        var token = getAuthToken('
        assert.deepEqual(token, {
          token: 'YmFyYmF6OmJhcmJheQ==',
          type: 'Basic',
          password: 'barbay',
          username: 'barbaz'
        })
        assert.equal(decodeBase64(token.token), 'barbaz:barbay')
        done()
      })
    })
    it('recursively finds registries for deep url if option is set', function (done, undef) {
      var opts = {recursive: true}
      var content = [
        '
        '
        '
        '
      ].join('\n')
      fs.writeFile(npmRcPath, content, function (err) {
        var getAuthToken = requireUncached('../index')
        assert(!err, err)
        var token = getAuthToken('https:
        assert.deepEqual(token, {
          token: 'YmFyYmF6OmJhcmJheQ==',
          type: 'Basic',
          password: 'barbay',
          username: 'barbaz'
        })
        assert.equal(decodeBase64(token.token), 'barbaz:barbay')
        token = getAuthToken('https:
        assert.deepEqual(token, {
          token: 'YmFyYmF6OmZvb2Jheg==',
          type: 'Basic',
          password: 'foobaz',
          username: 'barbaz'
        })
        assert.equal(decodeBase64(token.token), 'barbaz:foobaz')
        assert.equal(getAuthToken('
        done()
      })
    })
  })
})

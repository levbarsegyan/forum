'use strict';
const ReadPreference = function(mode, tags, options) {
  if (tags && !Array.isArray(tags)) {
    console.warn(
      'ReadPreference tags must be an array, this will change in the next major version'
    );
    if (typeof tags.maxStalenessSeconds !== 'undefined') {
      options = tags;
      tags = undefined;
    } else {
      tags = [tags];
    }
  }
  this.mode = mode;
  this.tags = tags;
  options = options || {};
  if (options.maxStalenessSeconds != null) {
    if (options.maxStalenessSeconds <= 0) {
      throw new TypeError('maxStalenessSeconds must be a positive integer');
    }
    this.maxStalenessSeconds = options.maxStalenessSeconds;
    this.minWireVersion = 5;
  }
  if (this.mode === ReadPreference.PRIMARY || this.mode === true) {
    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {
      throw new TypeError('Primary read preference cannot be combined with tags');
    }
    if (this.maxStalenessSeconds) {
      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');
    }
  }
};
Object.defineProperty(ReadPreference.prototype, 'preference', {
  enumerable: true,
  get: function() {
    return this.mode;
  }
});
ReadPreference.PRIMARY = 'primary';
ReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';
ReadPreference.SECONDARY = 'secondary';
ReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';
ReadPreference.NEAREST = 'nearest';
const VALID_MODES = [
  ReadPreference.PRIMARY,
  ReadPreference.PRIMARY_PREFERRED,
  ReadPreference.SECONDARY,
  ReadPreference.SECONDARY_PREFERRED,
  ReadPreference.NEAREST,
  true,
  false,
  null
];
ReadPreference.isValid = function(mode) {
  return VALID_MODES.indexOf(mode) !== -1;
};
ReadPreference.prototype.isValid = function(mode) {
  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);
};
const needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];
ReadPreference.prototype.slaveOk = function() {
  return needSlaveOk.indexOf(this.mode) !== -1;
};
ReadPreference.prototype.equals = function(readPreference) {
  return readPreference.mode === this.mode;
};
ReadPreference.prototype.toJSON = function() {
  const readPreference = { mode: this.mode };
  if (Array.isArray(this.tags)) readPreference.tags = this.tags;
  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;
  return readPreference;
};
ReadPreference.primary = new ReadPreference('primary');
ReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');
ReadPreference.secondary = new ReadPreference('secondary');
ReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');
ReadPreference.nearest = new ReadPreference('nearest');
module.exports = ReadPreference;

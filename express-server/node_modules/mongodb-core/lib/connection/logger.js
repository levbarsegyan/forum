'use strict';
var f = require('util').format,
  MongoError = require('../error').MongoError;
var classFilters = {};
var filteredClasses = {};
var level = null;
var pid = process.pid;
var currentLogger = null;
var Logger = function(className, options) {
  if (!(this instanceof Logger)) return new Logger(className, options);
  options = options || {};
  this.className = className;
  if (options.logger) {
    currentLogger = options.logger;
  } else if (currentLogger == null) {
    currentLogger = console.log;
  }
  if (options.loggerLevel) {
    level = options.loggerLevel || 'error';
  }
  if (filteredClasses[this.className] == null) classFilters[this.className] = true;
};
Logger.prototype.debug = function(message, object) {
  if (
    this.isDebug() &&
    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
  ) {
    var dateTime = new Date().getTime();
    var msg = f('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);
    var state = {
      type: 'debug',
      message: message,
      className: this.className,
      pid: pid,
      date: dateTime
    };
    if (object) state.meta = object;
    currentLogger(msg, state);
  }
};
(Logger.prototype.warn = function(message, object) {
  if (
    this.isWarn() &&
    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
  ) {
    var dateTime = new Date().getTime();
    var msg = f('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);
    var state = {
      type: 'warn',
      message: message,
      className: this.className,
      pid: pid,
      date: dateTime
    };
    if (object) state.meta = object;
    currentLogger(msg, state);
  }
}),
  (Logger.prototype.info = function(message, object) {
    if (
      this.isInfo() &&
      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
    ) {
      var dateTime = new Date().getTime();
      var msg = f('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);
      var state = {
        type: 'info',
        message: message,
        className: this.className,
        pid: pid,
        date: dateTime
      };
      if (object) state.meta = object;
      currentLogger(msg, state);
    }
  }),
  (Logger.prototype.error = function(message, object) {
    if (
      this.isError() &&
      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
    ) {
      var dateTime = new Date().getTime();
      var msg = f('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);
      var state = {
        type: 'error',
        message: message,
        className: this.className,
        pid: pid,
        date: dateTime
      };
      if (object) state.meta = object;
      currentLogger(msg, state);
    }
  }),
  (Logger.prototype.isInfo = function() {
    return level === 'info' || level === 'debug';
  }),
  (Logger.prototype.isError = function() {
    return level === 'error' || level === 'info' || level === 'debug';
  }),
  (Logger.prototype.isWarn = function() {
    return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';
  }),
  (Logger.prototype.isDebug = function() {
    return level === 'debug';
  });
Logger.reset = function() {
  level = 'error';
  filteredClasses = {};
};
Logger.currentLogger = function() {
  return currentLogger;
};
Logger.setCurrentLogger = function(logger) {
  if (typeof logger !== 'function') throw new MongoError('current logger must be a function');
  currentLogger = logger;
};
Logger.filter = function(type, values) {
  if (type === 'class' && Array.isArray(values)) {
    filteredClasses = {};
    values.forEach(function(x) {
      filteredClasses[x] = true;
    });
  }
};
Logger.setLevel = function(_level) {
  if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {
    throw new Error(f('%s is an illegal logging level', _level));
  }
  level = _level;
};
module.exports = Logger;

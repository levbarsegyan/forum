'use strict';
const AuthProvider = require('./auth_provider').AuthProvider;
const retrieveKerberos = require('../utils').retrieveKerberos;
let kerberos;
class GSSAPI extends AuthProvider {
  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {
    const source = credentials.source;
    const username = credentials.username;
    const password = credentials.password;
    const mechanismProperties = credentials.mechanismProperties;
    const gssapiServiceName =
      mechanismProperties['gssapiservicename'] ||
      mechanismProperties['gssapiServiceName'] ||
      'mongodb';
    GSSAPIInitialize(
      this,
      kerberos.processes.MongoAuthProcess,
      source,
      username,
      password,
      source,
      gssapiServiceName,
      sendAuthCommand,
      connection,
      mechanismProperties,
      callback
    );
  }
  auth(sendAuthCommand, connections, credentials, callback) {
    if (kerberos == null) {
      try {
        kerberos = retrieveKerberos();
      } catch (e) {
        return callback(e, null);
      }
    }
    super.auth(sendAuthCommand, connections, credentials, callback);
  }
}
var GSSAPIInitialize = function(
  self,
  MongoAuthProcess,
  db,
  username,
  password,
  authdb,
  gssapiServiceName,
  sendAuthCommand,
  connection,
  options,
  callback
) {
  var mongo_auth_process = new MongoAuthProcess(
    connection.host,
    connection.port,
    gssapiServiceName,
    options
  );
  mongo_auth_process.init(username, password, function(err) {
    if (err) return callback(err, false);
    mongo_auth_process.transition('', function(err, payload) {
      if (err) return callback(err, false);
      MongoDBGSSAPIFirstStep(
        self,
        mongo_auth_process,
        payload,
        db,
        username,
        password,
        authdb,
        sendAuthCommand,
        connection,
        callback
      );
    });
  });
};
var MongoDBGSSAPIFirstStep = function(
  self,
  mongo_auth_process,
  payload,
  db,
  username,
  password,
  authdb,
  sendAuthCommand,
  connection,
  callback
) {
  var command = {
    saslStart: 1,
    mechanism: 'GSSAPI',
    payload: payload,
    autoAuthorize: 1
  };
  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {
    if (err) return callback(err, false);
    mongo_auth_process.transition(doc.payload, function(err, payload) {
      if (err) return callback(err, false);
      MongoDBGSSAPISecondStep(
        self,
        mongo_auth_process,
        payload,
        doc,
        db,
        username,
        password,
        authdb,
        sendAuthCommand,
        connection,
        callback
      );
    });
  });
};
var MongoDBGSSAPISecondStep = function(
  self,
  mongo_auth_process,
  payload,
  doc,
  db,
  username,
  password,
  authdb,
  sendAuthCommand,
  connection,
  callback
) {
  var command = {
    saslContinue: 1,
    conversationId: doc.conversationId,
    payload: payload
  };
  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {
    if (err) return callback(err, false);
    mongo_auth_process.transition(doc.payload, function(err, payload) {
      if (err) return callback(err, false);
      MongoDBGSSAPIThirdStep(
        self,
        mongo_auth_process,
        payload,
        doc,
        db,
        username,
        password,
        authdb,
        sendAuthCommand,
        connection,
        callback
      );
    });
  });
};
var MongoDBGSSAPIThirdStep = function(
  self,
  mongo_auth_process,
  payload,
  doc,
  db,
  username,
  password,
  authdb,
  sendAuthCommand,
  connection,
  callback
) {
  var command = {
    saslContinue: 1,
    conversationId: doc.conversationId,
    payload: payload
  };
  sendAuthCommand(connection, '$external.$cmd', command, (err, r) => {
    if (err) return callback(err, false);
    mongo_auth_process.transition(null, function(err) {
      if (err) return callback(err, null);
      callback(null, r);
    });
  });
};
module.exports = GSSAPI;

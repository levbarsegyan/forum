'use strict';
module.exports = function (req, time) {
	if (req.timeoutTimer) {
		return req;
	}
	var delays = isNaN(time) ? time : {socket: time, connect: time};
	var host = req._headers ? (' to ' + req._headers.host) : '';
	if (delays.connect !== undefined) {
		req.timeoutTimer = setTimeout(function timeoutHandler() {
			req.abort();
			var e = new Error('Connection timed out on request' + host);
			e.code = 'ETIMEDOUT';
			req.emit('error', e);
		}, delays.connect);
	}
	req.on('socket', function assign(socket) {
		if (!(socket.connecting || socket._connecting)) {
			connect.call(socket);
			return;
		}
		socket.once('connect', connect);
	});
	function clear() {
		if (req.timeoutTimer) {
			clearTimeout(req.timeoutTimer);
			req.timeoutTimer = null;
		}
	}
	function connect() {
		clear();
		if (delays.socket !== undefined) {
			this.setTimeout(delays.socket, function socketTimeoutHandler() {
				req.abort();
				var e = new Error('Socket timed out on request' + host);
				e.code = 'ESOCKETTIMEDOUT';
				req.emit('error', e);
			});
		}
	}
	return req.on('error', clear);
};

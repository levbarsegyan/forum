var SessionStrategy = require('./strategies/session')
  , SessionManager = require('./sessionmanager');
function Authenticator() {
  this._key = 'passport';
  this._strategies = {};
  this._serializers = [];
  this._deserializers = [];
  this._infoTransformers = [];
  this._framework = null;
  this._userProperty = 'user';
  this.init();
}
Authenticator.prototype.init = function() {
  this.framework(require('./framework/connect')());
  this.use(new SessionStrategy(this.deserializeUser.bind(this)));
  this._sm = new SessionManager({ key: this._key }, this.serializeUser.bind(this));
};
Authenticator.prototype.use = function(name, strategy) {
  if (!strategy) {
    strategy = name;
    name = strategy.name;
  }
  if (!name) { throw new Error('Authentication strategies must have a name'); }
  this._strategies[name] = strategy;
  return this;
};
Authenticator.prototype.unuse = function(name) {
  delete this._strategies[name];
  return this;
};
Authenticator.prototype.framework = function(fw) {
  this._framework = fw;
  return this;
};
Authenticator.prototype.initialize = function(options) {
  options = options || {};
  this._userProperty = options.userProperty || 'user';
  return this._framework.initialize(this, options);
};
Authenticator.prototype.authenticate = function(strategy, options, callback) {
  return this._framework.authenticate(this, strategy, options, callback);
};
Authenticator.prototype.authorize = function(strategy, options, callback) {
  options = options || {};
  options.assignProperty = 'account';
  var fn = this._framework.authorize || this._framework.authenticate;
  return fn(this, strategy, options, callback);
};
Authenticator.prototype.session = function(options) {
  return this.authenticate('session', options);
};
Authenticator.prototype.serializeUser = function(fn, req, done) {
  if (typeof fn === 'function') {
    return this._serializers.push(fn);
  }
  var user = fn;
  if (typeof req === 'function') {
    done = req;
    req = undefined;
  }
  var stack = this._serializers;
  (function pass(i, err, obj) {
    if ('pass' === err) {
      err = undefined;
    }
    if (err || obj || obj === 0) { return done(err, obj); }
    var layer = stack[i];
    if (!layer) {
      return done(new Error('Failed to serialize user into session'));
    }
    function serialized(e, o) {
      pass(i + 1, e, o);
    }
    try {
      var arity = layer.length;
      if (arity == 3) {
        layer(req, user, serialized);
      } else {
        layer(user, serialized);
      }
    } catch(e) {
      return done(e);
    }
  })(0);
};
Authenticator.prototype.deserializeUser = function(fn, req, done) {
  if (typeof fn === 'function') {
    return this._deserializers.push(fn);
  }
  var obj = fn;
  if (typeof req === 'function') {
    done = req;
    req = undefined;
  }
  var stack = this._deserializers;
  (function pass(i, err, user) {
    if ('pass' === err) {
      err = undefined;
    }
    if (err || user) { return done(err, user); }
    if (user === null || user === false) { return done(null, false); }
    var layer = stack[i];
    if (!layer) {
      return done(new Error('Failed to deserialize user out of session'));
    }
    function deserialized(e, u) {
      pass(i + 1, e, u);
    }
    try {
      var arity = layer.length;
      if (arity == 3) {
        layer(req, obj, deserialized);
      } else {
        layer(obj, deserialized);
      }
    } catch(e) {
      return done(e);
    }
  })(0);
};
Authenticator.prototype.transformAuthInfo = function(fn, req, done) {
  if (typeof fn === 'function') {
    return this._infoTransformers.push(fn);
  }
  var info = fn;
  if (typeof req === 'function') {
    done = req;
    req = undefined;
  }
  var stack = this._infoTransformers;
  (function pass(i, err, tinfo) {
    if ('pass' === err) {
      err = undefined;
    }
    if (err || tinfo) { return done(err, tinfo); }
    var layer = stack[i];
    if (!layer) {
      return done(null, info);
    }
    function transformed(e, t) {
      pass(i + 1, e, t);
    }
    try {
      var arity = layer.length;
      if (arity == 1) {
        var t = layer(info);
        transformed(null, t);
      } else if (arity == 3) {
        layer(req, info, transformed);
      } else {
        layer(info, transformed);
      }
    } catch(e) {
      return done(e);
    }
  })(0);
};
Authenticator.prototype._strategy = function(name) {
  return this._strategies[name];
};
module.exports = Authenticator;

"use strict";
var ChildProcess = require("child_process"),
    LimitIt = require("limit-it"),
    Typpy = require("typpy");
function ExecLimiter(limit) {
    if (Typpy(this) !== "execlimiter") {
        return new ExecLimiter(limit);
    }
    this.limitIt = new LimitIt(limit);
}
ExecLimiter.prototype.add = function (command, args, options, callback) {
    var useExec = false,
        largs = [];
    if (typeof args === "function") {
        callback = args;
        options = {};
        args = [];
        useExec = true;
    } else if (typeof options === "function") {
        callback = options;
        if (Array.isArray(args)) {
            options = {};
        } else {
            options = args;
            args = [];
            useExec = true;
        }
    }
    if (useExec) {
        largs = [command, options];
    } else {
        largs = [command, args, options];
    }
    function spawner(command, args, options, callback) {
        var ignoreStdout = options.ignoreStdout;
        delete options.ignoreStdout;
        var child = ChildProcess.spawn(command, args, options),
            err = "",
            out = "";
        child.stderr.on("data", function (data) {
            err += data;
        });
        if (ignoreStdout === false) {
            child.stdout.on("data", function (chunk) {
                out += chunk;
            });
        }
        child.on("close", function (code) {
            var error = null;
            if (code) {
                error = new Error(err);
                error.code = code;
            }
            callback(error, out);
        });
    }
    this.limitIt.add(useExec ? ChildProcess.exec : spawner, largs, callback);
    return this;
};
module.exports = ExecLimiter;

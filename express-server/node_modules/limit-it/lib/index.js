"use strict";
var Typpy = require("typpy");
var DEFAULT_LIMIT = 50;
function BuffElm(func, args, callback) {
    this._ = func;
    this.callback = callback;
    this.args = args || [];
    this.state = 0;
}
function LimitIt(limit) {
    if (Typpy(this) !== "limitit") {
        return new LimitIt(limit);
    }
    limit = limit || DEFAULT_LIMIT;
    this.limit = limit;
    this.buffer = [];
    this.running = 0;
}
LimitIt.prototype.add = function (func, args, callback) {
    if (typeof args === "function") {
        callback = args;
        args = [];
    }
    this.buffer.push(new BuffElm(func, args, callback));
    return this.check();
};
LimitIt.prototype.exceeded = function () {
    return this.running >= this.limit;
};
LimitIt.prototype.check = function () {
    var self = this,
        i = 0,
        c = null;
    if (self.exceeded()) {
        return self;
    }
    for (; i < self.buffer.length; ++i) {
        c = self.buffer[i];
        if (c.state !== 0) {
            continue;
        }
        ++self.running;
        self.run(c);
        if (self.exceeded()) {
            break;
        }
    }
    return self;
};
LimitIt.prototype.run = function (c) {
    var self = this;
    if (c.state !== 0) debugger;
    c.args.push(function () {
        c.state = 2;
        --self.running;
        c.callback.apply(self, arguments);
        self.check();
    });
    c.state = 1;
    c._.apply(self, c.args);
    return self;
};
module.exports = LimitIt;
